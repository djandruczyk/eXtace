dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/main.c)

EXTACE_MAJOR_VERSION=1
EXTACE_MINOR_VERSION=8
EXTACE_MICRO_VERSION=12

EXTACE_VERSION=$EXTACE_MAJOR_VERSION.$EXTACE_MINOR_VERSION.${EXTACE_MICRO_VERSION}

AM_INIT_AUTOMAKE(extace, ${EXTACE_VERSION})
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE


dnl =========================================================================
dnl control variables
dnl =========================================================================

have_rfftw=no
have_drfftw=no
dnl have_alsa_05x=no
dnl have_alsa_final=no


dnl Checks for library functions.

dnl Checks for programs.
AC_PROG_CC
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AM_PROG_LIBTOOL

AM_PATH_GTK(1.2.0, , AC_MSG_ERROR([** GTK 1.2.0 not installed or broken **]),gthread)
AM_PATH_GLIB(1.2.0, , AC_MSG_ERROR([** GLIB 1.2.0 not installed or broken **]),gthread)

dnl
dnl Check for esound library
dnl
AM_PATH_ESD(0.2.8, AC_DEFINE(HAVE_ESD),echo "You need the esound-devel package!!!";exit 0)

dnl Checks for header files.
dnl AC_HEADER_DIRENT
dnl AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h sys/ioctl.h sys/time.h unistd.h pthread.h)

CFLAGS="-O2 "
AC_SUBST(CFLAGS)

EFENCE=""
AC_SUBST(EFENCE)

EXTRA_LIBS=""
AC_SUBST(EXTRA_LIBS)

dnl ===============
dnl Debugging stuff
dnl ===============

dnl General Debugging code
AC_ARG_ENABLE(debug,
[  --enable-debug	  enable debugging [default=no]],, enable_debug=no)

if test "$enable_debug" = yes; then
DFLAGS="$DFLAGS -g -DDEBUG"
fi
AC_SUBST(DFLAGS)

dnl ALSA support removed, no longer needed
dnl ALSA routines Debugging code
dnl AC_ARG_ENABLE(alsa-debug,
dnl [  --enable-alsa-debug	  enable ALSA debugging [default=no]],, enable_alsa_debug=no)

dnl if test "$enable_alsa_debug" = yes; then
dnl DFLAGS="$DFLAGS -g -DALSA_DEBUG"
dnl fi
dnl AC_SUBST(DFLAGS)

dnl Thread routines Debugging code
AC_ARG_ENABLE(thread-debug,
[  --enable-thread-debug	  enable thread debugging [default=no]],, enable_thread_debug=no)

if test "$enable_thread_debug" = yes; then
DFLAGS="$DFLAGS -g -DTHREAD_DEBUG"
fi
AC_SUBST(DFLAGS)

dnl Drag'n Drop routines Debugging code
AC_ARG_ENABLE(dnd-debug,
[  --enable-dnd-debug	  enable DND debugging ],, enable_dnd_debug=no)

if test "$enable_dnd_debug" = yes; then
DFLAGS="$DFLAGS -g -DDND_DEBUG"
fi
AC_SUBST(DFLAGS)

dnl Window function Debugging code
AC_ARG_ENABLE(window-debug,
[  --enable-window-debug	  enable window function debugging ],, enable_window_debug=no)

if test "$enable_window_debug" = yes; then
DFLAGS="$DFLAGS -g -DWINDOW_DEBUG"
fi
AC_SUBST(DFLAGS)

dnl Buffer functions Debugging code
AC_ARG_ENABLE(buffer-debug,
[  --enable-buffer-debug	  enable buffering code debugging ],, enable_buffer_debug=no)

if test "$enable_buffer_debug" = yes; then
DFLAGS="$DFLAGS -g -DBUFFER_DEBUG"
fi
AC_SUBST(DFLAGS)

dnl Use electric fence (malloc debugger)
AC_ARG_ENABLE(malloc-debug,
[  --enable-malloc-debug	  enable Malloc code debugging via ElectricFence ],, enable_malloc_debug=no)

if test "$enable_malloc_debug" = yes; then
	AC_CHECK_LIB(efence, malloc,, )
EFENCE="$EFENCE -lefence"
fi
AC_SUBST(EFENCE)

dnl ==============
dnl profiling
dnl =============



AC_ARG_ENABLE(profiling,
[  --enable-profiling	  enable profiling ],, enable_profiling=no)

if test "$enable_profiling" = yes; then
PFLAGS="-pg"
fi
AC_SUBST(PFLAGS)

dnl ---
dnl POSIX.4 threads
dnl ---
AC_CHECK_LIB(pthread,pthread_create, ,
         AC_CHECK_LIB(c_r,pthread_create,LDFLAGS="-pthreads",
                 AC_MSG_ERROR([** POSIX.4 threads not installed or broken **])))


dnl ===============
dnl Alsa Specific
dnl ===============

dnl AC_MSG_CHECKING(for alsa version)
dnl AC_EGREP_CPP([AP_maGiC_VALUE],
dnl [
dnl #include <sys/asoundlib.h>
dnl #if defined(SND_LIB_MAJOR) && defined(SND_LIB_MINOR)
dnl #if SND_LIB_MAJOR>0 || (SND_LIB_MAJOR==0 && SND_LIB_MINOR==5)
dnl AP_maGiC_VALUE
dnl #endif
dnl #endif
dnl ],
dnl have_alsa_05x=yes
dnl ALSA_LIBS="-lasound"
dnl AC_DEFINE(HAVE_ALSA_05)
dnl AC_MSG_RESULT([found 0.5.x]),
dnl AC_EGREP_CPP([AP_maGiC_VALUE],
dnl [
dnl #include <sys/asoundlib.h>
dnl #if defined(SND_LIB_MAJOR) && defined(SND_LIB_MINOR)
dnl #if SND_LIB_MAJOR>0 || (SND_LIB_MAJOR==0 && SND_LIB_MINOR>=6)
dnl AP_maGiC_VALUE
dnl #endif
dnl #endif
dnl ],
dnl have_alsa_final=yes
dnl ALSA_LIBS=" "
dnl AC_DEFINE(HAVE_ALSA_09)
dnl AC_MSG_RESULT([found latest])
dnl )
dnl )
dnl 
dnl

dnl fftw
dnl
PROGRAMS_EXTACE=""
AC_CHECK_LIB(rfftw, rfftw_one, have_rfftw=yes,,[-lfftw -lm] )

if test "$have_rfftw" = "yes"
then
 	AC_CHECK_LIB(rfftw, rfftw_one,, )
	PROGRAMS_EXTACE=extace
	EXTRA_LIBS="-lrfftw -lfftw -lm"
	AC_SUBST(EXTRA_LIBS)
	
fi

if test "$have_rfftw" = "no" 
then
	AC_CHECK_LIB(drfftw, rfftw_one, have_drfftw=yes,,[-ldfftw -lm] )

	if test "$have_drfftw" = "yes"
	then
		AC_CHECK_LIB(drfftw, rfftw_one,, )
		PROGRAMS_EXTACE=extace
		EXTRA_LIBS="-ldrfftw -ldfftw -lm"
		AC_SUBST(EXTRA_LIBS)
	
	fi
fi

if test "$have_rfftw" = "no"
then
	if test "$have_drfftw" = "no"
	then
		echo 
		echo "!!! FFTW libraries NOT found. eXtace will NOT compile without them!!!"
		echo
		echo "Please install the FFTW library (Fastest FFT in the West), it is available from http://www.fftw.org or from your most convienient .RPM .DEB or Gentoo mirror"
		echo
		echo " - Gentoo users can get it via \"emerge fftw\" as root"
		echo " - Debian users can get it via \"apt-get fftw\" or \"apt-get fftw-lib\" as root"
		echo " - RPM users (mandrake, suse, redhat) can install it via \"urpmi fftw\" or \"urpmi fftw-lib\", or via http://RPMfind.net as root"
		echo
		exit 1
	fi

fi

LIBS=""
AC_CHECK_LIB(gdk_imlib, gdk_imlib_render,,echo "Imlib not found!"; exit 0,[`gtk-config --libs` ])

EXTACE_DATADIR="${prefix}/share/eXtace"
AC_SUBST(EXTACE_DATADIR)
AC_SUBST(EXTACE_MAJOR_VERSION)
AC_SUBST(EXTACE_MINOR_VERSION)
AC_SUBST(EXTACE_MICRO_VERSION)
AC_SUBST(EXTACE_VERSION)
AC_SUBST(ALSA_LIBS)
AC_OUTPUT([
Makefile 
src/Makefile
extace.spec
VERSION
])

echo "
Configuration:

    Install Path:			${prefix}
    General Debugging:			${enable_debug}
    Thread Debugging:			${enable_thread_debug}
dnl    ALSA Debugging:			${enable_alsa_debug}
    Buffer Code Debugging:		${enable_buffer_debug}
    Drag 'n Drop Debugging:		${enable_dnd_debug}
    Window Function Debugging:		${enable_window_debug}
    Memory Allocation Debugging:	${enable_malloc_debug}
    Profiling:				${enable_profiling}
dnl    ALSA 0.5.x capability		${have_alsa_05x}
dnl    ALSA 0.9.x capability		${have_alsa_final}
"
